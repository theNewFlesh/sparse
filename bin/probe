'''
.. module:: probe
	:platform: Unix
	:synopsis: Probe command line search tool

.. moduleauthor:: Alex Braun <alexander.g.braun@gmail.com>
'''
# ------------------------------------------------------------------------------

import argparse
from stitch.views.probe_cli import ProbeCLI
from stitch.test.utils.qube_backingstore import QubeBackingStore
from stitch.test.utils.renderlog_backingstore import RenderLogBackingStore

BACKINGSTORES = {'qube': QubeBackingStore, 'renderlog': RenderLogBackingStore}
PROMPT = ["SpQL[", "]> "]
# ------------------------------------------------------------------------------

def run():
	parser = argparse.ArgumentParser(description='Query given backingstore')

	parser.add_argument('backingstore', metavar='str', type=str, nargs=1,
						action='store', help='The backingstore to query')

	parser.add_argument('-u', '--updates', metavar='str', type=str, nargs=1,
						action='store', default='automatic', help='Manual or automatic updates')

	parser.add_argument('-a', '--args', metavar='str', type=str, nargs='*',
						action='store', default=[], help='Backingstore arguments')

	parser.add_argument('-k', '--kwargs', metavar='str', type=str, nargs='?',
						action='store', default={}, help='Backingstore key word arguments')

	parser.add_argument('-s', '--search', metavar='str', type=str, nargs='?',
						action='store', default=False, help='A SpQL search string')

	parser.add_argument('-f', '--displayfields', metavar='str', type=str, nargs='*',
						action='store', default=False, help='Only display these fields')

	parser.add_argument('-p', '--prompt', metavar='str', type=str, nargs=1,
						action='store', default=False, help='Add custom text to SpQL prompt')

	parser.add_argument('-d', '--debug', default=False, action='store_true',
						help='Enable debug mode')

	args = parser.parse_args()
	updates = args.updates
	bks = args.backingstore[0]
	_args = args.args
	kwargs = args.kwargs
	if args.kwargs:
		kwargs = eval(args.kwargs)

	prompt = args.prompt
	if prompt:
		prompt = PROMPT[0] + prompt[0] + PROMPT[1]
	else:
		prompt = PROMPT[0] + bks + PROMPT[1]

	cli = ProbeCLI(BACKINGSTORES[bks](*_args, **kwargs), updates=updates,
					display_fields=args.displayfields, debug_mode=args.debug,
					prompt=prompt)

	if args.search:
		cli._api.search(args.search, display_fields=args.displayfields)
		print cli.results
	else:
		cli.cmdloop()

def main():
	run()

if __name__ == '__main__':
	main()
